using HoneyWebPlatform.Services.Data.Interfaces;
using Microsoft.Extensions.Options;
using System.Net;
using System.Net.Mail;
using HoneyWebPlatform.Services.Data.Models;
using HoneyWebPlatform.Data.Models;

namespace HoneyWebPlatform.Services.Data
{
    public class OrderEmailService : IOrderEmailService
    {
        private readonly EmailSettings _emailSettings;
        private readonly IEmailSender _emailSender;

        public OrderEmailService(IOptions<EmailSettings> emailSettings, IEmailSender emailSender)
        {
            _emailSettings = emailSettings.Value;
            _emailSender = emailSender;
        }

        public async Task SendOrderConfirmationEmailAsync(string customerEmail, Order order, string customerName)
        {
            try
            {
                var subject = "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Ä—ä—á–∫–∞ - Save The Bee Bulgaria";
                
                var emailBody = $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #F59F0A, #D97706); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }}
        .order-details {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }}
        .order-item {{ border-bottom: 1px solid #eee; padding: 10px 0; }}
        .total {{ font-weight: bold; font-size: 1.2em; color: #F59F0A; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üçØ Save The Bee Bulgaria</h1>
            <h2>–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Ä—ä—á–∫–∞</h2>
        </div>
        <div class='content'>
            <p>–ó–¥—Ä–∞–≤–µ–π—Ç–µ <strong>{customerName}</strong>,</p>
            
            <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞! –í–∞—à–µ—Ç–æ –∑–∞—è–≤—è–≤–∞–Ω–µ –µ –ø–æ–ª—É—á–µ–Ω–æ –∏ —â–µ –±—ä–¥–µ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–æ –≤—ä–∑–º–æ–∂–Ω–æ –Ω–∞–π-—Å–∫–æ—Ä–æ.</p>
            
            <div class='order-details'>
                <h3>üìã –î–µ—Ç–∞–π–ª–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:</h3>
                <div class='order-item'>
                    <strong>–ù–æ–º–µ—Ä –Ω–∞ –ø–æ—Ä—ä—á–∫–∞:</strong> {order.Id}
                </div>
                <div class='order-item'>
                    <strong>–î–∞—Ç–∞:</strong> {order.CreatedOn:dd.MM.yyyy HH:mm}
                </div>
                <div class='order-item'>
                    <strong>–°—Ç–∞—Ç—É—Å:</strong> {order.Status}
                </div>
                <div class='order-item'>
                    <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.PhoneNumber}
                </div>
                <div class='order-item'>
                    <strong>–ê–¥—Ä–µ—Å:</strong> {order.Address}
                </div>
                <div class='order-item total'>
                    <strong>–û–±—â–∞ —Å—É–º–∞:</strong> {order.TotalPrice:F2} –ª–≤
                </div>
            </div>
            
            <p>–ù–∞—à–∏—è—Ç –µ–∫–∏–ø —â–µ —Å–µ —Å–≤—ä—Ä–∂–µ —Å –í–∞—Å —Å–∫–æ—Ä–æ –∑–∞ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–π–ª–∏—Ç–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞—Ç–∞.</p>
            
            <p>–ê–∫–æ –∏–º–∞—Ç–µ –≤—ä–ø—Ä–æ—Å–∏, –Ω–µ —Å–µ –∫–æ–ª–µ–±–∞–π—Ç–µ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ—Ç–µ —Å –Ω–∞—Å.</p>
            
            <div class='footer'>
                <p>–° –Ω–∞–π-–¥–æ–±—Ä–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è,<br><strong>–ï–∫–∏–ø—ä—Ç –Ω–∞ Save The Bee Bulgaria</strong></p>
                <hr>
                <p><strong>Save The Bee Bulgaria</strong><br>
                üìß Email: savethebeebulgaria@gmail.com<br>
                üìû –¢–µ–ª–µ—Ñ–æ–Ω: +359888000000</p>
            </div>
        </div>
    </div>
</body>
</html>";

                await _emailSender.SendEmailAsync(customerEmail, subject, emailBody, order.PhoneNumber);
                Console.WriteLine($"DEBUG: OrderEmailService - Order confirmation email sent successfully to: {customerEmail}");
            }
            catch (Exception ex)
            {
                // Log the error but don't fail the order creation
                Console.WriteLine($"Failed to send order confirmation email: {ex.Message}");
                Console.WriteLine($"Email error stack trace: {ex.StackTrace}");
                // Don't throw - let the order creation succeed even if email fails
            }
        }

        public async Task SendOrderStatusUpdateEmailAsync(string customerEmail, Order order, string customerName)
        {
            try
            {
                var subject = $"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞ {order.Id} - Save The Bee Bulgaria";
                
                var statusMessage = order.Status switch
                {
                    OrderStatus.–û–±—Ä–∞–±–æ—Ç–≤–∞–Ω => "–í–∞—à–∞—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ –µ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–µ –æ–±—Ä–∞–±–æ—Ç–≤–∞.",
                    OrderStatus.–ü—Ä–∏–≥–æ—Ç–≤–µ–Ω => "–í–∞—à–∞—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ –µ –ø—Ä–∏–≥–æ—Ç–≤–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ.",
                    OrderStatus.–ò–∑–ø—Ä–∞—Ç–µ–Ω => "–í–∞—à–∞—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞ –∏ –µ –Ω–∞ –ø—ä—Ç –∫—ä–º –í–∞—Å.",
                    OrderStatus.–ü—Ä–∏–∫–ª—é—á–µ–Ω => "–í–∞—à–∞—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ –µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–µ–Ω–∞. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∏!",
                    _ => "–°—Ç–∞—Ç—É—Å—ä—Ç –Ω–∞ –≤–∞—à–∞—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ –µ –æ–±–Ω–æ–≤–µ–Ω."
                };

                var emailBody = $@"
–ó–¥—Ä–∞–≤–µ–π—Ç–µ {customerName},

–°—Ç–∞—Ç—É—Å—ä—Ç –Ω–∞ –≤–∞—à–∞—Ç–∞ –ø–æ—Ä—ä—á–∫–∞ –µ –æ–±–Ω–æ–≤–µ–Ω.

–î–µ—Ç–∞–π–ª–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:
- –ù–æ–º–µ—Ä –Ω–∞ –ø–æ—Ä—ä—á–∫–∞: {order.Id}
- –ù–æ–≤ —Å—Ç–∞—Ç—É—Å: {order.Status}
- –î–∞—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {DateTime.Now:dd.MM.yyyy HH:mm}
- –û–±—â–∞ —Å—É–º–∞: {order.TotalPrice:F2} –ª–≤

{statusMessage}

–ê–∫–æ –∏–º–∞—Ç–µ –≤—ä–ø—Ä–æ—Å–∏, –Ω–µ —Å–µ –∫–æ–ª–µ–±–∞–π—Ç–µ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ—Ç–µ —Å –Ω–∞—Å.

–° –Ω–∞–π-–¥–æ–±—Ä–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è,
–ï–∫–∏–ø—ä—Ç –Ω–∞ Save The Bee Bulgaria

---
Save The Bee Bulgaria
Email: savethebeebulgaria@gmail.com
–¢–µ–ª–µ—Ñ–æ–Ω: +359888000000
";

                await _emailSender.SendEmailAsync(customerEmail, subject, emailBody, order.PhoneNumber);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to send order status update email: {ex.Message}");
                Console.WriteLine($"Email error stack trace: {ex.StackTrace}");
                // Don't throw - let the order update succeed even if email fails
            }
        }

        public async Task SendAdminOrderNotificationAsync(Order order, string customerName)
        {
            try
            {
                var subject = $"–ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞ #{order.Id} - Save The Bee Bulgaria Admin";
                
                var emailBody = $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #dc2626, #b91c1c); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }}
        .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }}
        .order-details {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }}
        .order-item {{ border-bottom: 1px solid #eee; padding: 10px 0; }}
        .urgent {{ background: #fef2f2; border: 1px solid #fecaca; padding: 15px; border-radius: 8px; margin: 20px 0; }}
        .footer {{ text-align: center; margin-top: 30px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üö® –ê–î–ú–ò–ù –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</h1>
            <h2>–ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞ –µ –ø–æ–ª—É—á–µ–Ω–∞!</h2>
        </div>
        <div class='content'>
            <div class='urgent'>
                <h3>‚ö†Ô∏è –ù–æ–≤–∞ –ø–æ—Ä—ä—á–∫–∞ –∏–∑–∏—Å–∫–≤–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!</h3>
                <p>–ú–æ–ª—è, –æ–±—Ä–∞–±–æ—Ç–µ—Ç–µ –ø–æ—Ä—ä—á–∫–∞—Ç–∞ –≤—ä–∑–º–æ–∂–Ω–æ –Ω–∞–π-—Å–∫–æ—Ä–æ.</p>
            </div>
            
            <div class='order-details'>
                <h3>üìã –î–µ—Ç–∞–π–ª–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:</h3>
                <div class='order-item'>
                    <strong>–ù–æ–º–µ—Ä –Ω–∞ –ø–æ—Ä—ä—á–∫–∞:</strong> {order.Id}
                </div>
                <div class='order-item'>
                    <strong>–ö–ª–∏–µ–Ω—Ç:</strong> {customerName}
                </div>
                <div class='order-item'>
                    <strong>–ò–º–µ–π–ª:</strong> {order.Email}
                </div>
                <div class='order-item'>
                    <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.PhoneNumber}
                </div>
                <div class='order-item'>
                    <strong>–ê–¥—Ä–µ—Å:</strong> {order.Address}
                </div>
                <div class='order-item'>
                    <strong>–û–±—â–∞ —Å—É–º–∞:</strong> {order.TotalPrice:F2} –ª–≤
                </div>
                <div class='order-item'>
                    <strong>–î–∞—Ç–∞:</strong> {order.CreatedOn:dd.MM.yyyy HH:mm}
                </div>
                <div class='order-item'>
                    <strong>–°—Ç–∞—Ç—É—Å:</strong> {order.Status}
                </div>
            </div>
            
            <p><strong>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª:</strong> <a href='https://savethebeebulgaria-production.up.railway.app/Admin/Orders/All'>/Admin/Orders/All</a></p>
            
            <div class='footer'>
                <p>–¢–æ–≤–∞ –µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞ –Ω–∞ Save The Bee Bulgaria.</p>
            </div>
        </div>
    </div>
</body>
</html>";

                await _emailSender.SendEmailAsync("savethebeebulgaria@gmail.com", subject, emailBody, order.PhoneNumber);
                Console.WriteLine($"DEBUG: OrderEmailService - Admin notification email sent successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to send admin order notification: {ex.Message}");
                Console.WriteLine($"Email error stack trace: {ex.StackTrace}");
                // Don't throw - let the order creation succeed even if email fails
            }
        }
    }
}
